{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pirag\\\\Desktop\\\\react-app\\\\src\\\\Components\\\\Calculator.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst scaleNames = {\n  c: 'Celsius',\n  f: 'Fahrenheit'\n};\n\nfunction toCelsius(fahrenheit) {\n  return (fahrenheit - 32) * 5 / 9;\n}\n\nfunction toFahrenheit(celsius) {\n  return celsius * 9 / 5 + 32;\n}\n\nfunction tryConvert(temperature, convert) {\n  const input = parseFloat(temperature);\n\n  if (Number.isNaN(input)) {\n    return '';\n  }\n\n  const output = convert(input);\n  const rounded = Math.round(output * 1000) / 1000;\n  return rounded.toString();\n}\n\nclass TemperatureInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(e) {\n    // this.setState({temperature: e.target.value});\n    this.props.onTemperatureChange(e.target.value);\n  }\n\n  render() {\n    const temperature = this.props.temperature;\n    const scale = this.props.scale;\n    return /*#__PURE__*/_jsxDEV(\"fieldset\", {\n      children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n        children: [\"Enter temperature in \", scaleNames[scale], \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        value: temperature,\n        onChange: this.handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default class Calculator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleCelsiusChange = this.handleCelsiusChange.bind(this);\n    this.handleFahrenheitChange = this.handleFahrenheitChange.bind(this);\n    this.state = {\n      temperature: '',\n      scale: 'c'\n    };\n  }\n\n  handleCelsiusChange(temperature) {\n    this.setState({\n      scale: 'c',\n      temperature\n    });\n  }\n\n  handleFahrenheitChange(temperature) {\n    this.setState({\n      scale: 'f',\n      temperature\n    });\n  }\n\n  render() {\n    const scale = this.state.scale;\n    const temperature = this.state.temperature;\n    const celsius = scale === 'f' ? tryConvert(temperature, toCelsius) : temperature;\n    const fahrenheit = scale === 'c' ? tryConvert(temperature, toFahrenheit) : temperature;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(TemperatureInput, {\n        scale: \"c\",\n        temperature: celsius,\n        onTemperatureChange: this.handleCelsiusChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TemperatureInput, {\n        scale: \"f\",\n        temperature: fahrenheit,\n        onTemperatureChange: this.handleFahrenheitChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(BoilingVerdict, {\n        celsius: parseFloat(celsius)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/pirag/Desktop/react-app/src/Components/Calculator.js"],"names":["React","scaleNames","c","f","toCelsius","fahrenheit","toFahrenheit","celsius","tryConvert","temperature","convert","input","parseFloat","Number","isNaN","output","rounded","Math","round","toString","TemperatureInput","Component","constructor","props","handleChange","bind","e","onTemperatureChange","target","value","render","scale","Calculator","handleCelsiusChange","handleFahrenheitChange","state","setState"],"mappings":"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","sourcesContent":["import React from 'react';\r\n\r\nconst scaleNames = {\r\n  c: 'Celsius',\r\n  f: 'Fahrenheit'\r\n};\r\n\r\nfunction toCelsius(fahrenheit) {\r\n  return (fahrenheit - 32) * 5 / 9;\r\n}\r\n\r\nfunction toFahrenheit(celsius) {\r\n  return (celsius * 9 / 5) + 32;\r\n}\r\n\r\nfunction tryConvert(temperature, convert) {\r\n  const input = parseFloat(temperature);\r\n  if (Number.isNaN(input)) {\r\n    return '';\r\n  }\r\n  const output = convert(input);\r\n  const rounded = Math.round(output * 1000) / 1000;\r\n  return rounded.toString();\r\n}\r\n\r\nclass TemperatureInput extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleChange = this.handleChange.bind(this);\r\n\r\n  }\r\n\r\n  handleChange(e) {\r\n    // this.setState({temperature: e.target.value});\r\n    this.props.onTemperatureChange(e.target.value);\r\n  }\r\n\r\n  render() {\r\n    const temperature = this.props.temperature;\r\n    const scale = this.props.scale;\r\n    return (\r\n      <fieldset>\r\n        <legend>Enter temperature in {scaleNames[scale]}:</legend>\r\n        <input value={temperature}\r\n               onChange={this.handleChange} />\r\n      </fieldset>\r\n    );\r\n  }\r\n}\r\n\r\nexport default class Calculator extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleCelsiusChange = this.handleCelsiusChange.bind(this);\r\n    this.handleFahrenheitChange = this.handleFahrenheitChange.bind(this);\r\n    this.state = {temperature: '', scale: 'c'};\r\n  }\r\n\r\n  handleCelsiusChange(temperature) {\r\n    this.setState({scale: 'c', temperature});\r\n  }\r\n\r\n  handleFahrenheitChange(temperature) {\r\n    this.setState({scale: 'f', temperature});\r\n  }\r\n\r\n  render() {\r\n    const scale = this.state.scale;\r\n    const temperature = this.state.temperature;\r\n    const celsius = scale === 'f' ? tryConvert(temperature, toCelsius) : temperature;\r\n    const fahrenheit = scale === 'c' ? tryConvert(temperature, toFahrenheit) : temperature;\r\n\r\n    return (\r\n      <div>\r\n        <TemperatureInput\r\n          scale=\"c\"\r\n          temperature={celsius}\r\n          onTemperatureChange={this.handleCelsiusChange} />\r\n        <TemperatureInput\r\n          scale=\"f\"\r\n          temperature={fahrenheit}\r\n          onTemperatureChange={this.handleFahrenheitChange} />\r\n        <BoilingVerdict\r\n          celsius={parseFloat(celsius)} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}